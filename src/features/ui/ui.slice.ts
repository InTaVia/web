import { createSlice } from '@reduxjs/toolkit';

import type { RootState } from '@/features/common/store';

export interface UiState {
  windows: Array<any>;
}

const initialState: UiState = {
  windows: [],
};

export const uiSlice = createSlice({
  name: 'ui',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    addWindow: (state, action) => {
      const window = action.payload;
      const newWindows = [...state.windows];
      window.id = newWindows.length;
      newWindows.push(window);
      state.windows = newWindows;
    },
    removeWindow: (state, action) => {
      const newWindows = [...state.windows].filter((e: any) => {
        return e.id !== action.payload.id;
      });

      state.windows = newWindows;
    },
    editWindow: (state, action) => {
      //console.log('REDUCER', state, action);

      const window = action.payload;
      const newWindows = [...state.windows];
      for (const w of newWindows) {
        console.log('WINDOW', JSON.stringify(w), window);
        /* if (w.key === window.i) {
        } */
      }
      state.windows = newWindows;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    /*  builder
        .addCase(fetchDataFromEuropeana.fulfilled, (state, action) => {
          state.status = 'idle';
          state.europeana = action.payload;
        })
        .addCase(fetchDataFromWikidata.fulfilled, (state, action) => {
          state.status = 'idle';
          state.wikidata = action.payload;
        })
        .addCase(fetchDataFromInTaVia.fulfilled, (state, action) => {
          state.status = 'idle';
          state.apis = action.payload;
        })
        .addCase(fetchDataFromApis.fulfilled, (state, action) => {
          state.status = 'idle';
          state.apis = state.apis.map((person: any) => {
            var returnValue = { ...person };
            if (person.uri === action.payload.url) {
              returnValue.apis = action.payload;
            }
            return returnValue;
          });
        }); */
  },
});

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
// export const selectCount = (state: RootState) => state.counter.value;

export const { addWindow, removeWindow, editWindow } = uiSlice.actions;

export const selectWindows = (state: RootState) => {
  return state.ui.windows;
};

export default uiSlice.reducer;
